"""``DocxDataset`` loads/saves data from/to a .docx file using an underlying
filesystem (e.g.: local, S3, GCS). It uses python-docx from Document to handle the .docx file.
"""

from __future__ import annotations

from copy import deepcopy
from io import BytesIO
from pathlib import PurePosixPath
from typing import Any

import fsspec
from docx import Document
from kedro.io.core import (
    AbstractVersionedDataset,
    DatasetError,
    Version,
    get_filepath_str,
    get_protocol_and_path,
)


class DocxDataset(AbstractVersionedDataset[dict, dict]):
    """``DocxDataset`` loads/saves data from/to a .docx file using an underlying
    filesystem (e.g.: local, S3, GCS). It uses python-docx from Document to handle the .docx file.

    ### Example usage for the [YAML API](https://docs.kedro.org/en/stable/data/data_catalog_yaml_examples.html):

    ```yaml
    cats:
        type: openxml.DocxDataset
        filepath: soya.docx
    ```
    ### Example usage for the [Python API](https://docs.kedro.org/en/stable/data/advanced_data_catalog_usage.html):

    ```python

    from docx import Document
    from kedro_datasets.openxml import DocxDataset

    data = Document()
    data.add_paragraph("Hello, World !")
    dataset = DocxDataset(filepath=tmp_path / "test.docx")
    dataset.save(data)

    reloaded = dataset.load()
    assert data == reloaded
    assert data.paragraphs[0].text == reloaded.paragraphs[0].text
    ```
    """

    DEFAULT_FS_ARGS: dict[str, Any] = {"open_args_save": {"mode": "wb"}}

    def __init__(  # noqa: PLR0913
        self,
        *,
        filepath: str,
        version: Version | None = None,
        credentials: dict[str, Any] | None = None,
        fs_args: dict[str, Any] | None = None,
        metadata: dict[str, Any] | None = None,
    ) -> None:
        """Creates a new instance of ``DocxDataset`` pointing to a concrete .docx file
        on a specific filesystem.

        Args:
            filepath: Filepath in POSIX format to a .docx file prefixed with a protocol like `s3://`.
                If prefix is not provided, `file` protocol (local filesystem) will be used.
                The prefix should be any protocol supported by ``fsspec``.
                Note: `http(s)` doesn't support versioning.
            version: If specified, should be an instance of
                ``kedro.io.core.Version``. If its ``load`` attribute is
                None, the latest version will be loaded. If its ``save``
                attribute is None, save version will be autogenerated.
            credentials: Credentials required to get access to the underlying filesystem.
                E.g. for ``GCSFileSystem`` it should look like `{"token": None}`.
            fs_args: Extra arguments to pass into underlying filesystem class constructor
                (e.g. `{"project": "my-project"}` for ``GCSFileSystem``), as well as
                to pass to the filesystem's `open` method through nested keys
                `open_args_load` and `open_args_save`.
                Here you can find all available arguments for `open`:
                https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open
                All defaults are preserved, except `mode`, which is set to `wb` when saving.
            metadata: Any arbitrary metadata.
                This is ignored by Kedro, but may be consumed by users or external plugins.
        """
        _fs_args = deepcopy(fs_args) or {}
        _fs_open_args_load = _fs_args.pop("open_args_load", {})
        _fs_open_args_save = _fs_args.pop("open_args_save", {})
        _credentials = deepcopy(credentials) or {}

        protocol, path = get_protocol_and_path(filepath, version)
        if protocol == "file":
            _fs_args.setdefault("auto_mkdir", True)

        self._protocol = protocol
        self._fs = fsspec.filesystem(self._protocol, **_credentials, **_fs_args)

        self.metadata = metadata

        super().__init__(
            filepath=PurePosixPath(path),
            version=version,
            exists_function=self._fs.exists,
            glob_function=self._fs.glob,
        )

        self._fs_open_args_load = {
            **self.DEFAULT_FS_ARGS.get("open_args_load", {}),
            **(_fs_open_args_load or {}),
        }
        self._fs_open_args_save = {
            **self.DEFAULT_FS_ARGS.get("open_args_save", {}),
            **(_fs_open_args_save or {}),
        }

    def _describe(self) -> dict[str, Any]:
        """Returns a dictionary with basic dataset information.

        Returns:
            dict[str, Any]: A dictionary with the following keys:
                - "filepath" (PurePosixPath): Path to the `.docx` file.
                - "protocol" (str): Filesystem protocol (e.g., 'file', 's3').
                - "version" (Version | None): Version information if specified.
        """
        return {
            "filepath": self._filepath,
            "protocol": self._protocol,
            "version": self._version,
        }

    def load(self) -> Document:
        """Loads a `.docx` file from the filesystem.

        Returns:
            Document: A `python-docx` Document instance containing the loaded content.
        """
        load_path = get_filepath_str(self._get_load_path(), self._protocol)
        with self._fs.open(load_path, **self._fs_open_args_load) as fs_file:
            return Document(fs_file)

    def save(self, data: Document) -> None:
        """Saves a `Document` object to the filesystem.

        Args:
            data (Document): A `python-docx` Document instance to be saved.
        """
        buffer = BytesIO()
        data.save(buffer)
        buffer.seek(0)
        save_path = get_filepath_str(self._get_save_path(), self._protocol)
        with self._fs.open(save_path, **self._fs_open_args_save) as fs_file:
            fs_file.write(buffer.read())

        self._invalidate_cache()

    def _exists(self) -> bool:
        """Checks whether the file exists on the filesystem.

        Returns:
            bool: True if the file exists, otherwise False.
        """
        try:
            load_path = get_filepath_str(self._get_load_path(), self._protocol)
        except DatasetError:
            return False

        return self._fs.exists(load_path)

    def _release(self) -> None:
        """Releases resources and invalidates the filesystem cache."""
        super()._release()
        self._invalidate_cache()

    def _invalidate_cache(self) -> None:
        """Invalidate underlying filesystem caches."""
        filepath = get_filepath_str(self._filepath, self._protocol)
        self._fs.invalidate_cache(filepath)

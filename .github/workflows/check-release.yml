name: Check Versions and Build-Publish

on:
  push:
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    - name: Check version
      run: python tools/github_actions/github_actions_release.py
    - name: Set outputs
      id: version_check
      run: |
        echo "::set-output name=new_release::${{ env.new_release }}"
        echo "::set-output name=package_name::${{ env.package_name }}"
        echo "::set-output name=package_version::${{ env.package_version }}"
    outputs:
      new_release: ${{ steps.version_check.outputs.new_release }}
      package_name: ${{ steps.version_check.outputs.package_name }}
      package_version: ${{ steps.version_check.outputs.package_version }}

  test:
    needs: check-version
    if: ${{ needs.check-version.outputs.new_release == 'true' }}
    uses: ./.github/workflows/check-plugin.yml
    with:
      plugin: ${{ needs.check-version.outputs.package_name }}

  build-publish:
    needs: test
    if: ${{ needs.check-version.outputs.new_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: |
        export plugin=${{ needs.check-version.outputs.package_name }}
        make package
    - name: Create GitHub Release
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GH_TAGGING_TOKEN }}
        script: |
          const package_name = "${{ needs.check-version.outputs.package_name }}"
          const package_version = "${{ needs.check-version.outputs.package_version }}"
          const response = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `${package_name}-${package_version}`,
            target_commitish: 'main',
            name: `${package_name}-${package_version}`,
            body: `Release ${package_version}`,
            draft: false,
            prerelease: false,
          });
          return response.data;
    - name: Publish distribution ðŸ“¦ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: ${{ needs.check-version.outputs.package_name }}/dist
        password: ${{ secrets.PYPI_API_TOKEN }}
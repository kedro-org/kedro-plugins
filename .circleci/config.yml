version: 2.1

orbs:
  win: circleci/windows@2.4.0

commands:
  # Windows-related commands
  win_setup_conda:
    # Miniconda3 is pre-installed on the machine:
    # https://circleci.com/docs/2.0/hello-world-windows/
    description: Setup conda
    steps:
      - run:
          name: Initialize conda
          command: conda init powershell
      - run:
          name: Create 'kedro_plugins' conda environment
          command: |
            conda create --name kedro_plugins python=$env:CONDA_ENV_PY_VERSION -y

  win_setup_requirements:
    description: Install Kedro plugins dependencies
    steps:
      - run:
          name: Install Kedro plugins dependencies
          command: |
            conda activate kedro_plugins
            python -m pip install -U pip setuptools wheel
            pip install git+https://github.com/kedro-org/kedro@main
            pip install -r test_requirements.txt -U

  win_build:
    description: Run build on Windows
    steps:
      - checkout
      - win_setup_conda
      - win_setup_requirements
      - run:
          # e2e tests are not currently runnable on CircleCI on Windows as
          # those require the ability to run Linux containers:
          # "The Windows executor currently only supports Windows containers.
          # Running Linux containers on Windows is not possible for now"
          # (from https://circleci.com/docs/2.0/hello-world-windows/)
          name: Run unit tests
          command: |
            conda activate kedro_plugins
            pytest .\tests

jobs:
  build_36_telemetry: &DEFAULT
    machine:
      # Don't use 2018 image: https://discuss.circleci.com/t/24639/18
      image: circleci/classic:201711-01
      docker_layer_caching: true
    working_directory: ~/kedro-telemetry
    environment:
      CONDA_ENV_PY_VERSION: "3.6"
    steps:
      - checkout
      - run:
          name: Create virtual env
          command: |
            # Get rid of pyenv stuff
            sudo rm -rf .pyenv/ /opt/circleci/.pyenv/
            # Download and install miniconda
            curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  > miniconda.sh
            bash miniconda.sh -b -p $HOME/miniconda
            # Create an anaconda virtualenv for ${CONDA_ENV_PY_VERSION} and make that the default python interpreter
            echo ". /home/circleci/miniconda/etc/profile.d/conda.sh" >> $BASH_ENV
            echo "conda deactivate; conda activate kedro-telemetry" >> $BASH_ENV
            . /home/circleci/miniconda/etc/profile.d/conda.sh
            conda create --name kedro-telemetry python=${CONDA_ENV_PY_VERSION} -y
            source $BASH_ENV
      - run:
          name: Pip install dependencies
          command: |
            make install-pip-setuptools
            pip install git+https://github.com/kedro-org/kedro
#            export AIRFLOW_GPL_UNIDECODE=yes
            pip install -r test_requirements.txt
            pre-commit install --install-hooks
            pre-commit install --hook-type pre-push
      - run:
          name: Run pylint and flake8
          command: |
            make lint
      - run:
          name: Run tests
          command: |
            make test
      - run:
          name: Run all end to end tests
          command: |
            make e2e-tests

  build_37_telemetry:
    <<: *DEFAULT
    environment:
      CONDA_ENV_PY_VERSION: 3.7

  build_38_telemetry:
    <<: *DEFAULT
    environment:
      CONDA_ENV_PY_VERSION: 3.8

  # Windows-related jobs
  win_build_36_telemetry:
    executor:
      name: win/default
    working_directory: ~/kedro-telemetry
    environment:
      CONDA_ENV_PY_VERSION: "3.6"
    steps: [win_build]

  win_build_37_telemetry:
    executor:
      name: win/default
    working_directory: ~/repo
    environment:
      CONDA_ENV_PY_VERSION: "3.7"
    steps:
      - win_build

  win_build_38_telemetry:
    executor:
      name: win/default
    working_directory: ~/repo
    environment:
      CONDA_ENV_PY_VERSION: "3.8"
    steps:
      - win_build

workflows:
  version: 2
  regular:
    jobs:
      - build_36_telemetry
      - build_37_telemetry
      - build_38_telemetry
      - win_build_36_telemetry
      - win_build_37_telemetry
      - win_build_38_telemetry
